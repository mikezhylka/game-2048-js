{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.ROWS_NODE = (0, $227c6742e0ff6f82$export$71511d61b312f219)(document.querySelectorAll(\".field-row\"));\n        this.LOSE_MESSAGE_NODE = document.querySelector(\".message-lose\");\n        this.WIN_MESSAGE_NODE = document.querySelector(\".message-win\");\n        this.SCORE_NODE = document.querySelector(\".game-score\");\n        this.gameActive = true;\n        this.remove = false;\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveCells\",\n            value: function moveCells() {\n                var _this = this;\n                var x = null;\n                var y = null;\n                document.addEventListener(\"touchstart\", function(e) {\n                    x = e.touches[0].clientX;\n                    y = e.touches[0].clientY;\n                });\n                document.addEventListener(\"touchmove\", function(e) {\n                    if (!x || !y) return;\n                    var clientX = e.touches[0].clientX;\n                    var clientY = e.touches[0].clientY;\n                    var xDiff = clientX - x;\n                    var yDiff = clientY - y;\n                    if (Math.abs(xDiff) > Math.abs(yDiff)) {\n                        if (xDiff < 0) horizontalMove(\"left\");\n                        else horizontalMove(\"right\");\n                    } else if (yDiff < 0) verticalMove(\"up\");\n                    else verticalMove(\"down\");\n                    x = null; // reset\n                    y = null; // reset\n                });\n                // move handler, checks whether anything has changed so we can make the move\n                var hasAnythingChanged = function(changedBoard) {\n                    if (!_this.arraysEqual(_this.board, changedBoard)) {\n                        _this.board = changedBoard;\n                        _this.updateBoard();\n                        _this.getScore();\n                        _this.placeRandomTile();\n                        _this.checkGameOver();\n                        _this.checkWin();\n                    }\n                };\n                var horizontalMove = function(direction) {\n                    var newBoard = [];\n                    _this.board.forEach(function(row) {\n                        var newRow = row.filter(function(cell) {\n                            return cell !== 0;\n                        });\n                        if (direction === \"right\") newRow = newRow.reverse();\n                        for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                            newRow[i] *= 2;\n                            newRow[i + 1] = 0;\n                            _this.score += newRow[i];\n                            _this.scoreChangeColor();\n                        }\n                        newRow = newRow.filter(function(cell) {\n                            return cell !== 0;\n                        });\n                        while(newRow.length < 4)newRow.push(0);\n                        if (direction === \"right\") newRow = newRow.reverse();\n                        newBoard.push(newRow);\n                    });\n                    hasAnythingChanged(newBoard);\n                };\n                var verticalMove = function(direction) {\n                    var _loop = function(col1) {\n                        if (direction === \"up\") {\n                            for(var cell = 0; cell < newBoard[col1].length; cell++)if (newBoard[col1][cell] === newBoard[col1][cell + 1]) {\n                                newBoard[col1][cell] *= 2;\n                                newBoard[col1][cell + 1] = 0;\n                                _this.score += newBoard[col1][cell];\n                                _this.scoreChangeColor();\n                            }\n                            newBoard[col1] = newBoard[col1].filter(function(cell) {\n                                return cell !== 0;\n                            });\n                            while(newBoard[col1].length < 4)newBoard[col1].push(0);\n                        } else if (direction === \"down\") {\n                            var merge = true;\n                            for(var cell1 = newBoard[col1].length - 1; cell1 >= 0; cell1--)if (newBoard[col1][cell1] === newBoard[col1][cell1 - 1] && merge) {\n                                newBoard[col1][cell1] *= 2;\n                                newBoard[col1][cell1 - 1] = 0;\n                                _this.score += newBoard[col1][cell1];\n                                _this.scoreChangeColor();\n                                merge = false;\n                            }\n                            newBoard[col1] = newBoard[col1].filter(function(cell) {\n                                return cell !== 0;\n                            });\n                            while(newBoard[col1].length < 4)newBoard[col1].unshift(0);\n                        }\n                    };\n                    var newBoard = [\n                        [],\n                        [],\n                        [],\n                        []\n                    ];\n                    var resultBoard = [\n                        [],\n                        [],\n                        [],\n                        []\n                    ];\n                    for(var cell = 0; cell < _this.board.length; cell++){\n                        for(var col = 0; col < _this.board.length; col++)if (_this.board[col][cell] !== 0) newBoard[cell].push(_this.board[col][cell]);\n                    }\n                    for(var col1 = 0; col1 < newBoard.length; col1++)_loop(col1);\n                    for(var col2 = 0; col2 < newBoard.length; col2++)for(var cell1 = 0; cell1 < newBoard.length; cell1++)resultBoard[cell1][col2] = newBoard[col2][cell1];\n                    if (!_this.arraysEqual(_this.board, resultBoard)) {\n                        _this.board = resultBoard;\n                        _this.updateBoard();\n                        _this.getScore();\n                        _this.placeRandomTile();\n                        _this.checkGameOver();\n                        _this.checkWin();\n                    }\n                };\n                document.addEventListener(\"keydown\", function(e) {\n                    if (!_this.gameActive) return;\n                    switch(e.key){\n                        case \"ArrowUp\":\n                            verticalMove(\"up\");\n                            break;\n                        case \"ArrowDown\":\n                            verticalMove(\"down\");\n                            break;\n                        case \"ArrowLeft\":\n                            horizontalMove(\"left\");\n                            break;\n                        case \"ArrowRight\":\n                            horizontalMove(\"right\");\n                            break;\n                    }\n                });\n            }\n        },\n        {\n            key: \"updateBoard\",\n            value: function updateBoard() {\n                var _this = this;\n                this.ROWS_NODE.forEach(function(row, rowIndex) {\n                    var cells = (0, $227c6742e0ff6f82$export$71511d61b312f219)(row.cells);\n                    cells.forEach(function(cell, cellIndex) {\n                        var boardValue = _this.board[rowIndex][cellIndex];\n                        if (cell.textContent !== boardValue) {\n                            if (boardValue === 0) {\n                                cell.className = \"field-cell\";\n                                cell.textContent = \"\";\n                            } else {\n                                cell.textContent = boardValue;\n                                cell.className = \"field-cell field-cell--\".concat(boardValue);\n                            }\n                        }\n                    });\n                });\n            }\n        },\n        {\n            key: \"arraysEqual\",\n            value: function arraysEqual(board1, board2) {\n                for(var row = 0; row < board1.length; row++)for(var cell = 0; cell < board1.length; cell++){\n                    if (board1[row][cell] !== board2[row][cell]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                this.SCORE_NODE.innerHTML = \"\".concat(this.score);\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                this.clickStartButton();\n                this.moveCells();\n            }\n        },\n        {\n            key: \"placeRandomTile\",\n            value: function placeRandomTile() {\n                var emptyCells = [];\n                for(var row = 0; row < 4; row++){\n                    for(var cell = 0; cell < 4; cell++)if (this.board[row][cell] === 0) emptyCells.push({\n                        row: row,\n                        cell: cell\n                    });\n                }\n                if (emptyCells.length > 0) {\n                    var randomCell = Math.floor(Math.random() * emptyCells.length);\n                    var randomValue = Math.random() <= 0.1 ? 4 : 2;\n                    var RandomTilePosition = emptyCells[randomCell];\n                    var row1 = RandomTilePosition.row, cell1 = RandomTilePosition.cell;\n                    this.board[row1][cell1] = randomValue;\n                    var changingCell = this.ROWS_NODE[row1].children[cell1];\n                    changingCell.classList.add(\"field-cell--\".concat(randomValue));\n                    changingCell.innerHTML = randomValue.toString();\n                    changingCell.style = \"color: #FF7F50\";\n                    setTimeout(function() {\n                        changingCell.style = \"\";\n                    }, 400);\n                }\n            }\n        },\n        {\n            key: \"clickStartButton\",\n            value: function clickStartButton() {\n                var _this = this;\n                var START_BUTTON_NODE = document.querySelector(\".button\");\n                var startButtonClickHandler = function() {\n                    if (!_this.remove) {\n                        _this.changeStartNodes();\n                        _this.placeRandomTile();\n                        _this.placeRandomTile();\n                        _this.remove = true;\n                        return;\n                    }\n                    _this.changeRestartNodes();\n                };\n                START_BUTTON_NODE.addEventListener(\"click\", startButtonClickHandler);\n            }\n        },\n        {\n            key: \"resetBoard\",\n            value: function resetBoard() {\n                this.board = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                this.ROWS_NODE.forEach(function(row) {\n                    row.childNodes.forEach(function(cell) {\n                        cell.innerHTML = \"\";\n                        cell.className = \"field-cell\";\n                    });\n                });\n            }\n        },\n        {\n            key: \"resetScore\",\n            value: function resetScore() {\n                this.score = 0;\n                this.SCORE_NODE.innerHTML = \"0\";\n            }\n        },\n        {\n            key: \"checkGameOver\",\n            value: function checkGameOver() {\n                var _this = this;\n                var allCellsFilled = function() {\n                    var result = true;\n                    _this.board.forEach(function(row) {\n                        if (row.find(function(cell) {\n                            return cell === 0;\n                        }) !== undefined) result = false;\n                    });\n                    return result;\n                };\n                if (allCellsFilled()) {\n                    this.gameActive = false;\n                    this.ROWS_NODE.forEach(function(row) {\n                        var cells = (0, $227c6742e0ff6f82$export$71511d61b312f219)(row.cells);\n                        cells.forEach(function(cell) {\n                            cell.style = \"color: #FF7F50\";\n                            setTimeout(function() {\n                                cell.style = \"\";\n                            }, 500);\n                        });\n                    });\n                    this.LOSE_MESSAGE_NODE.classList.remove(\"hidden\");\n                }\n            }\n        },\n        {\n            key: \"checkWin\",\n            value: function checkWin() {\n                var _this = this;\n                var winCellExists = function() {\n                    var result = false;\n                    _this.board.forEach(function(row) {\n                        if (row.find(function(cell) {\n                            return cell === 2048;\n                        }) !== undefined) result = true;\n                    });\n                    return result;\n                };\n                if (winCellExists()) {\n                    this.gameActive = false;\n                    this.WIN_MESSAGE_NODE.classList.remove(\"hidden\");\n                }\n            }\n        },\n        {\n            key: \"scoreChangeColor\",\n            value: function scoreChangeColor() {\n                var _this = this;\n                this.SCORE_NODE.style = \"color: #FF7F50\";\n                setTimeout(function() {\n                    _this.SCORE_NODE.style = \"\";\n                }, 400);\n            }\n        },\n        {\n            key: \"changeStartNodes\",\n            value: function changeStartNodes() {\n                var START_BUTTON_NODE = document.querySelector(\".button.start\");\n                var START_MESSAGE_NODE = document.querySelector(\".message.message-start\");\n                START_MESSAGE_NODE.innerHTML = \"Your ad can be here\";\n                START_MESSAGE_NODE.classList.replace(\"message-start\", \"message-restart\");\n                START_BUTTON_NODE.innerHTML = \"Restart\";\n                START_BUTTON_NODE.classList.replace(\"start\", \"restart\");\n                this.WIN_MESSAGE_NODE.classList.toggle(\"hidden\", true);\n                this.gameActive = true;\n            }\n        },\n        {\n            key: \"changeRestartNodes\",\n            value: function changeRestartNodes() {\n                var RESTART_BUTTON_NODE = document.querySelector(\".button.restart\");\n                var RESTART_MESSAGE_NODE = document.querySelector(\".message.message-restart\");\n                if (RESTART_BUTTON_NODE !== null) {\n                    this.WIN_MESSAGE_NODE.classList.add(\"hidden\");\n                    this.remove = true;\n                    this.resetBoard();\n                    this.resetScore();\n                    RESTART_MESSAGE_NODE.innerHTML = 'Press \"Start\" to begin game. <br> Good luck!';\n                    RESTART_BUTTON_NODE.innerHTML = \"Start\";\n                    RESTART_BUTTON_NODE.classList.replace(\"restart\", \"start\");\n                    RESTART_MESSAGE_NODE.classList.replace(\"message-restart\", \"message-start\");\n                    this.LOSE_MESSAGE_NODE.classList.toggle(\"hidden\", true);\n                }\n                this.remove = false;\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n$197cd56b15c33885$var$game.start();\n\n})();\n//# sourceMappingURL=index.ad181923.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ngame.start();\n","'use strict';\nclass Game {\n  constructor() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n\n    this.ROWS_NODE = [...document.querySelectorAll('.field-row')];\n    this.LOSE_MESSAGE_NODE = document.querySelector('.message-lose');\n    this.WIN_MESSAGE_NODE = document.querySelector('.message-win');\n    this.SCORE_NODE = document.querySelector('.game-score');\n\n    this.gameActive = true;\n    this.remove = false;\n  }\n\n  moveCells() {\n    let x = null;\n    let y = null;\n\n    document.addEventListener('touchstart', (e) => {\n      x = e.touches[0].clientX;\n      y = e.touches[0].clientY;\n    });\n\n    document.addEventListener('touchmove', (e) => {\n      if (!x || !y) {\n        return;\n      }\n\n      const clientX = e.touches[0].clientX;\n      const clientY = e.touches[0].clientY;\n\n      const xDiff = clientX - x;\n      const yDiff = clientY - y;\n\n      if (Math.abs(xDiff) > Math.abs(yDiff)) {\n        if (xDiff < 0) {\n          horizontalMove('left');\n        } else {\n          horizontalMove('right');\n        }\n      } else {\n        if (yDiff < 0) {\n          verticalMove('up');\n        } else {\n          verticalMove('down');\n        }\n      }\n\n      x = null; // reset\n      y = null; // reset\n    });\n\n    // move handler, checks whether anything has changed so we can make the move\n    const hasAnythingChanged = (changedBoard) => {\n      if (!this.arraysEqual(this.board, changedBoard)) {\n        this.board = changedBoard;\n        this.updateBoard();\n        this.getScore();\n        this.placeRandomTile();\n        this.checkGameOver();\n        this.checkWin();\n      }\n    };\n\n    const horizontalMove = (direction) => {\n      const newBoard = [];\n\n      this.board.forEach((row) => {\n        let newRow = row.filter((cell) => cell !== 0);\n\n        if (direction === 'right') {\n          newRow = newRow.reverse();\n        }\n\n        for (let i = 0; i < newRow.length - 1; i++) {\n          if (newRow[i] === newRow[i + 1]) {\n            newRow[i] *= 2;\n            newRow[i + 1] = 0;\n            this.score += newRow[i];\n            this.scoreChangeColor();\n          }\n        }\n\n        newRow = newRow.filter((cell) => cell !== 0);\n\n        while (newRow.length < 4) {\n          newRow.push(0);\n        }\n\n        if (direction === 'right') {\n          newRow = newRow.reverse();\n        }\n\n        newBoard.push(newRow);\n      });\n\n      hasAnythingChanged(newBoard);\n    };\n\n    const verticalMove = (direction) => {\n      const newBoard = [[], [], [], []];\n      const resultBoard = [[], [], [], []];\n\n      for (let cell = 0; cell < this.board.length; cell++) {\n        for (let col = 0; col < this.board.length; col++) {\n          if (this.board[col][cell] !== 0) {\n            newBoard[cell].push(this.board[col][cell]);\n          }\n        }\n      }\n\n      for (let col = 0; col < newBoard.length; col++) {\n        if (direction === 'up') {\n          for (let cell = 0; cell < newBoard[col].length; cell++) {\n            if (newBoard[col][cell] === newBoard[col][cell + 1]) {\n              newBoard[col][cell] *= 2;\n              newBoard[col][cell + 1] = 0;\n              this.score += newBoard[col][cell];\n              this.scoreChangeColor();\n            }\n          }\n\n          newBoard[col] = newBoard[col].filter((cell) => cell !== 0);\n\n          while (newBoard[col].length < 4) {\n            newBoard[col].push(0);\n          }\n        } else if (direction === 'down') {\n          let merge = true;\n\n          for (let cell = newBoard[col].length - 1; cell >= 0; cell--) {\n            if (newBoard[col][cell] === newBoard[col][cell - 1] && merge) {\n              newBoard[col][cell] *= 2;\n              newBoard[col][cell - 1] = 0;\n              this.score += newBoard[col][cell];\n              this.scoreChangeColor();\n              merge = false;\n            }\n          }\n\n          newBoard[col] = newBoard[col].filter((cell) => cell !== 0);\n\n          while (newBoard[col].length < 4) {\n            newBoard[col].unshift(0);\n          }\n        }\n      }\n\n      for (let col = 0; col < newBoard.length; col++) {\n        for (let cell = 0; cell < newBoard.length; cell++) {\n          resultBoard[cell][col] = newBoard[col][cell];\n        }\n      }\n\n      if (!this.arraysEqual(this.board, resultBoard)) {\n        this.board = resultBoard;\n        this.updateBoard();\n        this.getScore();\n        this.placeRandomTile();\n        this.checkGameOver();\n        this.checkWin();\n      }\n    };\n\n    document.addEventListener('keydown', (e) => {\n      if (!this.gameActive) {\n        return;\n      }\n\n      switch (e.key) {\n        case 'ArrowUp':\n          verticalMove('up');\n          break;\n\n        case 'ArrowDown':\n          verticalMove('down');\n          break;\n\n        case 'ArrowLeft':\n          horizontalMove('left');\n          break;\n\n        case 'ArrowRight':\n          horizontalMove('right');\n          break;\n      }\n    });\n  }\n\n  updateBoard() {\n    this.ROWS_NODE.forEach((row, rowIndex) => {\n      const cells = [...row.cells];\n\n      cells.forEach((cell, cellIndex) => {\n        const boardValue = this.board[rowIndex][cellIndex];\n\n        if (cell.textContent !== boardValue) {\n          if (boardValue === 0) {\n            cell.className = `field-cell`;\n            cell.textContent = '';\n          } else {\n            cell.textContent = boardValue;\n            cell.className = `field-cell field-cell--${boardValue}`;\n          }\n        }\n      });\n    });\n  }\n\n  arraysEqual(board1, board2) {\n    for (let row = 0; row < board1.length; row++) {\n      for (let cell = 0; cell < board1.length; cell++) {\n        if (board1[row][cell] !== board2[row][cell]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  getScore() {\n    this.SCORE_NODE.innerHTML = `${this.score}`;\n  }\n\n  start() {\n    this.clickStartButton();\n    this.moveCells();\n  }\n\n  placeRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let cell = 0; cell < 4; cell++) {\n        if (this.board[row][cell] === 0) {\n          emptyCells.push({ row, cell });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomCell = Math.floor(Math.random() * emptyCells.length);\n\n      const randomValue = Math.random() <= 0.1 ? 4 : 2;\n      const RandomTilePosition = emptyCells[randomCell];\n      const { row, cell } = RandomTilePosition;\n\n      this.board[row][cell] = randomValue;\n\n      const changingCell = this.ROWS_NODE[row].children[cell];\n\n      changingCell.classList.add(`field-cell--${randomValue}`);\n      changingCell.innerHTML = randomValue.toString();\n\n      changingCell.style = 'color: #FF7F50';\n\n      setTimeout(() => {\n        changingCell.style = '';\n      }, 400);\n    }\n  }\n\n  clickStartButton() {\n    const START_BUTTON_NODE = document.querySelector('.button');\n    const startButtonClickHandler = () => {\n      if (!this.remove) {\n        this.changeStartNodes();\n        this.placeRandomTile();\n        this.placeRandomTile();\n\n        this.remove = true;\n\n        return;\n      }\n\n      this.changeRestartNodes();\n    };\n\n    START_BUTTON_NODE.addEventListener('click', startButtonClickHandler);\n  }\n\n  resetBoard() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.ROWS_NODE.forEach((row) => {\n      row.childNodes.forEach((cell) => {\n        cell.innerHTML = '';\n        cell.className = 'field-cell';\n      });\n    });\n  }\n\n  resetScore() {\n    this.score = 0;\n    this.SCORE_NODE.innerHTML = '0';\n  }\n\n  checkGameOver() {\n    const allCellsFilled = () => {\n      let result = true;\n\n      this.board.forEach((row) => {\n        if (row.find((cell) => cell === 0) !== undefined) {\n          result = false;\n        }\n      });\n\n      return result;\n    };\n\n    if (allCellsFilled()) {\n      this.gameActive = false;\n\n      this.ROWS_NODE.forEach((row) => {\n        const cells = [...row.cells];\n\n        cells.forEach((cell) => {\n          cell.style = 'color: #FF7F50';\n\n          setTimeout(() => {\n            cell.style = '';\n          }, 500);\n        });\n      });\n\n      this.LOSE_MESSAGE_NODE.classList.remove('hidden');\n    }\n  }\n\n  checkWin() {\n    const winCellExists = () => {\n      let result = false;\n\n      this.board.forEach((row) => {\n        if (row.find((cell) => cell === 2048) !== undefined) {\n          result = true;\n        }\n      });\n\n      return result;\n    };\n\n    if (winCellExists()) {\n      this.gameActive = false;\n      this.WIN_MESSAGE_NODE.classList.remove('hidden');\n    }\n  }\n\n  scoreChangeColor() {\n    this.SCORE_NODE.style = 'color: #FF7F50';\n\n    setTimeout(() => {\n      this.SCORE_NODE.style = '';\n    }, 400);\n  }\n\n  changeStartNodes() {\n    const START_BUTTON_NODE = document.querySelector('.button.start');\n    const START_MESSAGE_NODE = document.querySelector('.message.message-start');\n\n    START_MESSAGE_NODE.innerHTML = 'Your ad can be here';\n\n    START_MESSAGE_NODE.classList.replace('message-start', 'message-restart');\n    START_BUTTON_NODE.innerHTML = 'Restart';\n    START_BUTTON_NODE.classList.replace('start', 'restart');\n    this.WIN_MESSAGE_NODE.classList.toggle('hidden', true);\n\n    this.gameActive = true;\n  }\n\n  changeRestartNodes() {\n    const RESTART_BUTTON_NODE = document.querySelector('.button.restart');\n    const RESTART_MESSAGE_NODE = document.querySelector(\n      '.message.message-restart',\n    );\n\n    if (RESTART_BUTTON_NODE !== null) {\n      this.WIN_MESSAGE_NODE.classList.add('hidden');\n      this.remove = true;\n      this.resetBoard();\n      this.resetScore();\n\n      RESTART_MESSAGE_NODE.innerHTML =\n        'Press \"Start\" to begin game. <br> Good luck!';\n      RESTART_BUTTON_NODE.innerHTML = 'Start';\n      RESTART_BUTTON_NODE.classList.replace('restart', 'start');\n\n      RESTART_MESSAGE_NODE.classList.replace(\n        'message-restart',\n        'message-start',\n      );\n      this.LOSE_MESSAGE_NODE.classList.toggle('hidden', true);\n    }\n\n    this.remove = false;\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$227c6742e0ff6f82$export$71511d61b312f219","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","TypeError","$197cd56b15c33885$var$game","protoProps","Game","instance","Constructor","board","score","ROWS_NODE","document","querySelectorAll","LOSE_MESSAGE_NODE","querySelector","WIN_MESSAGE_NODE","SCORE_NODE","gameActive","remove","key","value","_this","x","y","addEventListener","e","touches","clientX","clientY","xDiff","yDiff","Math","abs","horizontalMove","verticalMove","hasAnythingChanged","changedBoard","arraysEqual","updateBoard","getScore","placeRandomTile","checkGameOver","checkWin","direction","newBoard","forEach","row","newRow","filter","cell","reverse","scoreChangeColor","push","resultBoard","col","col1","_loop","merge","cell1","unshift","col2","rowIndex","cells","cellIndex","boardValue","textContent","className","concat","board1","board2","innerHTML","clickStartButton","moveCells","emptyCells","randomCell","floor","random","randomValue","RandomTilePosition","row1","changingCell","children","classList","add","style","setTimeout","START_BUTTON_NODE","changeStartNodes","changeRestartNodes","childNodes","result","undefined","find","START_MESSAGE_NODE","replace","toggle","RESTART_BUTTON_NODE","RESTART_MESSAGE_NODE","resetBoard","resetScore","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","start"],"version":3,"file":"index.ad181923.js.map"}