{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(){\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.ROWS_NODE = [\n            ...document.querySelectorAll(\".field-row\")\n        ];\n        this.LOSE_MESSAGE_NODE = document.querySelector(\".message-lose\");\n        this.WIN_MESSAGE_NODE = document.querySelector(\".message-win\");\n        this.SCORE_NODE = document.querySelector(\".game-score\");\n        this.gameActive = true;\n        this.remove = false;\n    }\n    moveCells() {\n        let x = null;\n        let y = null;\n        document.addEventListener(\"touchstart\", (e)=>{\n            x = e.touches[0].clientX;\n            y = e.touches[0].clientY;\n        });\n        document.addEventListener(\"touchmove\", (e)=>{\n            if (!x || !y) return;\n            const clientX = e.touches[0].clientX;\n            const clientY = e.touches[0].clientY;\n            const xDiff = clientX - x;\n            const yDiff = clientY - y;\n            if (Math.abs(xDiff) > Math.abs(yDiff)) {\n                if (xDiff < 0) horizontalMove(\"left\");\n                else horizontalMove(\"right\");\n            } else if (yDiff < 0) verticalMove(\"up\");\n            else verticalMove(\"down\");\n            x = null; // reset\n            y = null; // reset\n        });\n        // move handler, checks whether anything has changed so we can make the move\n        const hasAnythingChanged = (changedBoard)=>{\n            if (!this.arraysEqual(this.board, changedBoard)) {\n                this.board = changedBoard;\n                this.updateBoard();\n                this.getScore();\n                this.placeRandomTile();\n                this.checkGameOver();\n                this.checkWin();\n            }\n        };\n        const horizontalMove = (direction)=>{\n            const newBoard = [];\n            this.board.forEach((row)=>{\n                let newRow = row.filter((cell)=>cell !== 0);\n                if (direction === \"right\") newRow = newRow.reverse();\n                for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                    newRow[i] *= 2;\n                    newRow[i + 1] = 0;\n                    this.score += newRow[i];\n                    this.scoreChangeColor();\n                }\n                newRow = newRow.filter((cell)=>cell !== 0);\n                while(newRow.length < 4)newRow.push(0);\n                if (direction === \"right\") newRow = newRow.reverse();\n                newBoard.push(newRow);\n            });\n            hasAnythingChanged(newBoard);\n        };\n        const verticalMove = (direction)=>{\n            const newBoard = [\n                [],\n                [],\n                [],\n                []\n            ];\n            const resultBoard = [\n                [],\n                [],\n                [],\n                []\n            ];\n            for(let cell = 0; cell < this.board.length; cell++){\n                for(let col = 0; col < this.board.length; col++)if (this.board[col][cell] !== 0) newBoard[cell].push(this.board[col][cell]);\n            }\n            for(let col = 0; col < newBoard.length; col++){\n                if (direction === \"up\") {\n                    for(let cell = 0; cell < newBoard[col].length; cell++)if (newBoard[col][cell] === newBoard[col][cell + 1]) {\n                        newBoard[col][cell] *= 2;\n                        newBoard[col][cell + 1] = 0;\n                        this.score += newBoard[col][cell];\n                        this.scoreChangeColor();\n                    }\n                    newBoard[col] = newBoard[col].filter((cell)=>cell !== 0);\n                    while(newBoard[col].length < 4)newBoard[col].push(0);\n                } else if (direction === \"down\") {\n                    let merge = true;\n                    for(let cell = newBoard[col].length - 1; cell >= 0; cell--)if (newBoard[col][cell] === newBoard[col][cell - 1] && merge) {\n                        newBoard[col][cell] *= 2;\n                        newBoard[col][cell - 1] = 0;\n                        this.score += newBoard[col][cell];\n                        this.scoreChangeColor();\n                        merge = false;\n                    }\n                    newBoard[col] = newBoard[col].filter((cell)=>cell !== 0);\n                    while(newBoard[col].length < 4)newBoard[col].unshift(0);\n                }\n            }\n            for(let col = 0; col < newBoard.length; col++)for(let cell = 0; cell < newBoard.length; cell++)resultBoard[cell][col] = newBoard[col][cell];\n            if (!this.arraysEqual(this.board, resultBoard)) {\n                this.board = resultBoard;\n                this.updateBoard();\n                this.getScore();\n                this.placeRandomTile();\n                this.checkGameOver();\n                this.checkWin();\n            }\n        };\n        document.addEventListener(\"keydown\", (e)=>{\n            if (!this.gameActive) return;\n            switch(e.key){\n                case \"ArrowUp\":\n                    verticalMove(\"up\");\n                    break;\n                case \"ArrowDown\":\n                    verticalMove(\"down\");\n                    break;\n                case \"ArrowLeft\":\n                    horizontalMove(\"left\");\n                    break;\n                case \"ArrowRight\":\n                    horizontalMove(\"right\");\n                    break;\n            }\n        });\n    }\n    updateBoard() {\n        this.ROWS_NODE.forEach((row, rowIndex)=>{\n            const cells = [\n                ...row.cells\n            ];\n            cells.forEach((cell, cellIndex)=>{\n                const boardValue = this.board[rowIndex][cellIndex];\n                if (cell.textContent !== boardValue) {\n                    if (boardValue === 0) {\n                        cell.className = `field-cell`;\n                        cell.textContent = \"\";\n                    } else {\n                        cell.textContent = boardValue;\n                        cell.className = `field-cell field-cell--${boardValue}`;\n                    }\n                }\n            });\n        });\n    }\n    arraysEqual(board1, board2) {\n        for(let row = 0; row < board1.length; row++)for(let cell = 0; cell < board1.length; cell++){\n            if (board1[row][cell] !== board2[row][cell]) return false;\n        }\n        return true;\n    }\n    getScore() {\n        this.SCORE_NODE.innerHTML = `${this.score}`;\n    }\n    start() {\n        this.clickStartButton();\n        this.moveCells();\n    }\n    placeRandomTile() {\n        const emptyCells = [];\n        for(let row = 0; row < 4; row++){\n            for(let cell = 0; cell < 4; cell++)if (this.board[row][cell] === 0) emptyCells.push({\n                row: row,\n                cell: cell\n            });\n        }\n        if (emptyCells.length > 0) {\n            const randomCell = Math.floor(Math.random() * emptyCells.length);\n            const randomValue = Math.random() <= 0.1 ? 4 : 2;\n            const RandomTilePosition = emptyCells[randomCell];\n            const { row: row, cell: cell } = RandomTilePosition;\n            this.board[row][cell] = randomValue;\n            const changingCell = this.ROWS_NODE[row].children[cell];\n            changingCell.classList.add(`field-cell--${randomValue}`);\n            changingCell.innerHTML = randomValue.toString();\n            changingCell.style = \"color: #FF7F50\";\n            setTimeout(()=>{\n                changingCell.style = \"\";\n            }, 400);\n        }\n    }\n    clickStartButton() {\n        const START_BUTTON_NODE = document.querySelector(\".button\");\n        const startButtonClickHandler = ()=>{\n            if (!this.remove) {\n                this.changeStartNodes();\n                this.placeRandomTile();\n                this.placeRandomTile();\n                this.remove = true;\n                return;\n            }\n            this.changeRestartNodes();\n        };\n        START_BUTTON_NODE.addEventListener(\"click\", startButtonClickHandler);\n    }\n    resetBoard() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.ROWS_NODE.forEach((row)=>{\n            row.childNodes.forEach((cell)=>{\n                cell.innerHTML = \"\";\n                cell.className = \"field-cell\";\n            });\n        });\n    }\n    resetScore() {\n        this.score = 0;\n        this.SCORE_NODE.innerHTML = \"0\";\n    }\n    checkGameOver() {\n        const allCellsFilled = ()=>{\n            let result = true;\n            this.board.forEach((row)=>{\n                if (row.find((cell)=>cell === 0) !== undefined) result = false;\n            });\n            return result;\n        };\n        if (allCellsFilled()) {\n            this.gameActive = false;\n            this.ROWS_NODE.forEach((row)=>{\n                const cells = [\n                    ...row.cells\n                ];\n                cells.forEach((cell)=>{\n                    cell.style = \"color: #FF7F50\";\n                    setTimeout(()=>{\n                        cell.style = \"\";\n                    }, 500);\n                });\n            });\n            this.LOSE_MESSAGE_NODE.classList.remove(\"hidden\");\n        }\n    }\n    checkWin() {\n        const winCellExists = ()=>{\n            let result = false;\n            this.board.forEach((row)=>{\n                if (row.find((cell)=>cell === 2048) !== undefined) result = true;\n            });\n            return result;\n        };\n        if (winCellExists()) {\n            this.gameActive = false;\n            this.WIN_MESSAGE_NODE.classList.remove(\"hidden\");\n        }\n    }\n    scoreChangeColor() {\n        this.SCORE_NODE.style = \"color: #FF7F50\";\n        setTimeout(()=>{\n            this.SCORE_NODE.style = \"\";\n        }, 400);\n    }\n    changeStartNodes() {\n        const START_BUTTON_NODE = document.querySelector(\".button.start\");\n        const START_MESSAGE_NODE = document.querySelector(\".message.message-start\");\n        START_MESSAGE_NODE.innerHTML = \"Your ad can be here\";\n        START_MESSAGE_NODE.classList.replace(\"message-start\", \"message-restart\");\n        START_BUTTON_NODE.innerHTML = \"Restart\";\n        START_BUTTON_NODE.classList.replace(\"start\", \"restart\");\n        this.WIN_MESSAGE_NODE.classList.toggle(\"hidden\", true);\n        this.gameActive = true;\n    }\n    changeRestartNodes() {\n        const RESTART_BUTTON_NODE = document.querySelector(\".button.restart\");\n        const RESTART_MESSAGE_NODE = document.querySelector(\".message.message-restart\");\n        if (RESTART_BUTTON_NODE !== null) {\n            this.WIN_MESSAGE_NODE.classList.add(\"hidden\");\n            this.remove = true;\n            this.resetBoard();\n            this.resetScore();\n            RESTART_MESSAGE_NODE.innerHTML = 'Press \"Start\" to begin game. <br> Good luck!';\n            RESTART_BUTTON_NODE.innerHTML = \"Start\";\n            RESTART_BUTTON_NODE.classList.replace(\"restart\", \"start\");\n            RESTART_MESSAGE_NODE.classList.replace(\"message-restart\", \"message-start\");\n            this.LOSE_MESSAGE_NODE.classList.toggle(\"hidden\", true);\n        }\n        this.remove = false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n$09e991522ca7e64e$var$game.start();\n\n\n//# sourceMappingURL=index.4ee721d6.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ngame.start();\n","'use strict';\nclass Game {\n  constructor() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n\n    this.ROWS_NODE = [...document.querySelectorAll('.field-row')];\n    this.LOSE_MESSAGE_NODE = document.querySelector('.message-lose');\n    this.WIN_MESSAGE_NODE = document.querySelector('.message-win');\n    this.SCORE_NODE = document.querySelector('.game-score');\n\n    this.gameActive = true;\n    this.remove = false;\n  }\n\n  moveCells() {\n    let x = null;\n    let y = null;\n\n    document.addEventListener('touchstart', (e) => {\n      x = e.touches[0].clientX;\n      y = e.touches[0].clientY;\n    });\n\n    document.addEventListener('touchmove', (e) => {\n      if (!x || !y) {\n        return;\n      }\n\n      const clientX = e.touches[0].clientX;\n      const clientY = e.touches[0].clientY;\n\n      const xDiff = clientX - x;\n      const yDiff = clientY - y;\n\n      if (Math.abs(xDiff) > Math.abs(yDiff)) {\n        if (xDiff < 0) {\n          horizontalMove('left');\n        } else {\n          horizontalMove('right');\n        }\n      } else {\n        if (yDiff < 0) {\n          verticalMove('up');\n        } else {\n          verticalMove('down');\n        }\n      }\n\n      x = null; // reset\n      y = null; // reset\n    });\n\n    // move handler, checks whether anything has changed so we can make the move\n    const hasAnythingChanged = (changedBoard) => {\n      if (!this.arraysEqual(this.board, changedBoard)) {\n        this.board = changedBoard;\n        this.updateBoard();\n        this.getScore();\n        this.placeRandomTile();\n        this.checkGameOver();\n        this.checkWin();\n      }\n    };\n\n    const horizontalMove = (direction) => {\n      const newBoard = [];\n\n      this.board.forEach((row) => {\n        let newRow = row.filter((cell) => cell !== 0);\n\n        if (direction === 'right') {\n          newRow = newRow.reverse();\n        }\n\n        for (let i = 0; i < newRow.length - 1; i++) {\n          if (newRow[i] === newRow[i + 1]) {\n            newRow[i] *= 2;\n            newRow[i + 1] = 0;\n            this.score += newRow[i];\n            this.scoreChangeColor();\n          }\n        }\n\n        newRow = newRow.filter((cell) => cell !== 0);\n\n        while (newRow.length < 4) {\n          newRow.push(0);\n        }\n\n        if (direction === 'right') {\n          newRow = newRow.reverse();\n        }\n\n        newBoard.push(newRow);\n      });\n\n      hasAnythingChanged(newBoard);\n    };\n\n    const verticalMove = (direction) => {\n      const newBoard = [[], [], [], []];\n      const resultBoard = [[], [], [], []];\n\n      for (let cell = 0; cell < this.board.length; cell++) {\n        for (let col = 0; col < this.board.length; col++) {\n          if (this.board[col][cell] !== 0) {\n            newBoard[cell].push(this.board[col][cell]);\n          }\n        }\n      }\n\n      for (let col = 0; col < newBoard.length; col++) {\n        if (direction === 'up') {\n          for (let cell = 0; cell < newBoard[col].length; cell++) {\n            if (newBoard[col][cell] === newBoard[col][cell + 1]) {\n              newBoard[col][cell] *= 2;\n              newBoard[col][cell + 1] = 0;\n              this.score += newBoard[col][cell];\n              this.scoreChangeColor();\n            }\n          }\n\n          newBoard[col] = newBoard[col].filter((cell) => cell !== 0);\n\n          while (newBoard[col].length < 4) {\n            newBoard[col].push(0);\n          }\n        } else if (direction === 'down') {\n          let merge = true;\n\n          for (let cell = newBoard[col].length - 1; cell >= 0; cell--) {\n            if (newBoard[col][cell] === newBoard[col][cell - 1] && merge) {\n              newBoard[col][cell] *= 2;\n              newBoard[col][cell - 1] = 0;\n              this.score += newBoard[col][cell];\n              this.scoreChangeColor();\n              merge = false;\n            }\n          }\n\n          newBoard[col] = newBoard[col].filter((cell) => cell !== 0);\n\n          while (newBoard[col].length < 4) {\n            newBoard[col].unshift(0);\n          }\n        }\n      }\n\n      for (let col = 0; col < newBoard.length; col++) {\n        for (let cell = 0; cell < newBoard.length; cell++) {\n          resultBoard[cell][col] = newBoard[col][cell];\n        }\n      }\n\n      if (!this.arraysEqual(this.board, resultBoard)) {\n        this.board = resultBoard;\n        this.updateBoard();\n        this.getScore();\n        this.placeRandomTile();\n        this.checkGameOver();\n        this.checkWin();\n      }\n    };\n\n    document.addEventListener('keydown', (e) => {\n      if (!this.gameActive) {\n        return;\n      }\n\n      switch (e.key) {\n        case 'ArrowUp':\n          verticalMove('up');\n          break;\n\n        case 'ArrowDown':\n          verticalMove('down');\n          break;\n\n        case 'ArrowLeft':\n          horizontalMove('left');\n          break;\n\n        case 'ArrowRight':\n          horizontalMove('right');\n          break;\n      }\n    });\n  }\n\n  updateBoard() {\n    this.ROWS_NODE.forEach((row, rowIndex) => {\n      const cells = [...row.cells];\n\n      cells.forEach((cell, cellIndex) => {\n        const boardValue = this.board[rowIndex][cellIndex];\n\n        if (cell.textContent !== boardValue) {\n          if (boardValue === 0) {\n            cell.className = `field-cell`;\n            cell.textContent = '';\n          } else {\n            cell.textContent = boardValue;\n            cell.className = `field-cell field-cell--${boardValue}`;\n          }\n        }\n      });\n    });\n  }\n\n  arraysEqual(board1, board2) {\n    for (let row = 0; row < board1.length; row++) {\n      for (let cell = 0; cell < board1.length; cell++) {\n        if (board1[row][cell] !== board2[row][cell]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  getScore() {\n    this.SCORE_NODE.innerHTML = `${this.score}`;\n  }\n\n  start() {\n    this.clickStartButton();\n    this.moveCells();\n  }\n\n  placeRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let cell = 0; cell < 4; cell++) {\n        if (this.board[row][cell] === 0) {\n          emptyCells.push({ row, cell });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomCell = Math.floor(Math.random() * emptyCells.length);\n\n      const randomValue = Math.random() <= 0.1 ? 4 : 2;\n      const RandomTilePosition = emptyCells[randomCell];\n      const { row, cell } = RandomTilePosition;\n\n      this.board[row][cell] = randomValue;\n\n      const changingCell = this.ROWS_NODE[row].children[cell];\n\n      changingCell.classList.add(`field-cell--${randomValue}`);\n      changingCell.innerHTML = randomValue.toString();\n\n      changingCell.style = 'color: #FF7F50';\n\n      setTimeout(() => {\n        changingCell.style = '';\n      }, 400);\n    }\n  }\n\n  clickStartButton() {\n    const START_BUTTON_NODE = document.querySelector('.button');\n    const startButtonClickHandler = () => {\n      if (!this.remove) {\n        this.changeStartNodes();\n        this.placeRandomTile();\n        this.placeRandomTile();\n\n        this.remove = true;\n\n        return;\n      }\n\n      this.changeRestartNodes();\n    };\n\n    START_BUTTON_NODE.addEventListener('click', startButtonClickHandler);\n  }\n\n  resetBoard() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.ROWS_NODE.forEach((row) => {\n      row.childNodes.forEach((cell) => {\n        cell.innerHTML = '';\n        cell.className = 'field-cell';\n      });\n    });\n  }\n\n  resetScore() {\n    this.score = 0;\n    this.SCORE_NODE.innerHTML = '0';\n  }\n\n  checkGameOver() {\n    const allCellsFilled = () => {\n      let result = true;\n\n      this.board.forEach((row) => {\n        if (row.find((cell) => cell === 0) !== undefined) {\n          result = false;\n        }\n      });\n\n      return result;\n    };\n\n    if (allCellsFilled()) {\n      this.gameActive = false;\n\n      this.ROWS_NODE.forEach((row) => {\n        const cells = [...row.cells];\n\n        cells.forEach((cell) => {\n          cell.style = 'color: #FF7F50';\n\n          setTimeout(() => {\n            cell.style = '';\n          }, 500);\n        });\n      });\n\n      this.LOSE_MESSAGE_NODE.classList.remove('hidden');\n    }\n  }\n\n  checkWin() {\n    const winCellExists = () => {\n      let result = false;\n\n      this.board.forEach((row) => {\n        if (row.find((cell) => cell === 2048) !== undefined) {\n          result = true;\n        }\n      });\n\n      return result;\n    };\n\n    if (winCellExists()) {\n      this.gameActive = false;\n      this.WIN_MESSAGE_NODE.classList.remove('hidden');\n    }\n  }\n\n  scoreChangeColor() {\n    this.SCORE_NODE.style = 'color: #FF7F50';\n\n    setTimeout(() => {\n      this.SCORE_NODE.style = '';\n    }, 400);\n  }\n\n  changeStartNodes() {\n    const START_BUTTON_NODE = document.querySelector('.button.start');\n    const START_MESSAGE_NODE = document.querySelector('.message.message-start');\n\n    START_MESSAGE_NODE.innerHTML = 'Your ad can be here';\n\n    START_MESSAGE_NODE.classList.replace('message-start', 'message-restart');\n    START_BUTTON_NODE.innerHTML = 'Restart';\n    START_BUTTON_NODE.classList.replace('start', 'restart');\n    this.WIN_MESSAGE_NODE.classList.toggle('hidden', true);\n\n    this.gameActive = true;\n  }\n\n  changeRestartNodes() {\n    const RESTART_BUTTON_NODE = document.querySelector('.button.restart');\n    const RESTART_MESSAGE_NODE = document.querySelector(\n      '.message.message-restart',\n    );\n\n    if (RESTART_BUTTON_NODE !== null) {\n      this.WIN_MESSAGE_NODE.classList.add('hidden');\n      this.remove = true;\n      this.resetBoard();\n      this.resetScore();\n\n      RESTART_MESSAGE_NODE.innerHTML =\n        'Press \"Start\" to begin game. <br> Good luck!';\n      RESTART_BUTTON_NODE.innerHTML = 'Start';\n      RESTART_BUTTON_NODE.classList.replace('restart', 'start');\n\n      RESTART_MESSAGE_NODE.classList.replace(\n        'message-restart',\n        'message-start',\n      );\n      this.LOSE_MESSAGE_NODE.classList.toggle('hidden', true);\n    }\n\n    this.remove = false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["constructor","board","score","ROWS_NODE","document","querySelectorAll","LOSE_MESSAGE_NODE","querySelector","WIN_MESSAGE_NODE","SCORE_NODE","gameActive","remove","moveCells","x","y","addEventListener","e","touches","clientX","clientY","xDiff","yDiff","Math","abs","horizontalMove","verticalMove","hasAnythingChanged","changedBoard","arraysEqual","updateBoard","getScore","placeRandomTile","checkGameOver","checkWin","direction","newBoard","forEach","row","newRow","filter","cell","reverse","i","length","scoreChangeColor","push","resultBoard","col","merge","unshift","key","rowIndex","cells","cellIndex","boardValue","textContent","className","board1","board2","innerHTML","start","clickStartButton","emptyCells","randomCell","floor","random","randomValue","changingCell","children","classList","add","toString","style","setTimeout","START_BUTTON_NODE","changeStartNodes","changeRestartNodes","resetBoard","childNodes","resetScore","allCellsFilled","result","undefined","find","winCellExists","START_MESSAGE_NODE","replace","toggle","RESTART_BUTTON_NODE","RESTART_MESSAGE_NODE"],"version":3,"file":"index.4ee721d6.js.map"}